/*

Integers: Recreation One
Divisors of 42 are : 1, 2, 3, 6, 7, 14, 21, 42. These divisors squared are: 1, 4, 9, 36, 49, 196, 441, 1764. The sum of the squared divisors is 2500 which is 50 * 50, a square!

Given two integers m, n (1 <= m <= n) we want to find all integers between m and n whose sum of squared divisors is itself a square. 42 is such a number.

The result will be an array of arrays or of tuples (in C an array of Pair) or a string, each subarray having two elements, first the number whose squared divisors is a square and then the sum of the squared divisors.

#Examples:
list_squared(1, 250) --> [[1, 1], [42, 2500], [246, 84100]]
list_squared(42, 250) --> [[42, 2500], [246, 84100]]
The form of the examples may change according to the language, see Example Tests: for more details.

Note

In Fortran - as in any other language - the returned string is not permitted to contain any redundant trailing whitespace: you can use dynamically allocated character strings.
*/

public class SumSquaredDivisors {
  
  public static String listSquared(long m, long n) {
     // your code
     long sum = 0;
      String output = "[";
      for(long num1 = m; num1<=n; num1++){
      //System.out.print(num1+" - ");
         for(long i = 1; i<num1; i++) {
            if(num1 % i == 0) {
                  sum = sum + (i*i);
                  //System.out.print(i+", ");           
            }
         }
         sum = sum + (num1*num1);
         //System.out.println("\nSum for number "+num1+" = "+sum);
         double squareRoot = Math.sqrt(sum); 
         if(squareRoot - Math.floor(squareRoot) == 0){
            if(output.length() == 1)
               output = output+"["+num1+", "+sum+"]";
            else
               output = output+", ["+num1+", "+sum+"]";
            //System.out.println(output);
         }
         sum=0;
      }
  return output+"]";
  }
  
  public static void main(String[]args){
    System.out.println(listSquared(1,250));
  }
}
